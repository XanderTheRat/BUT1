# -*- coding: utf-8 -*-
"""
Created on Thu Feb  3 16:59:38 2023
@author: LMM
"""


# =============================================================================
# Codage du contenu d'une case :
# - une case min√©e contient la valeur 1 ;
# - une case non min√©e contient la valeur correspondant au nombre de mines
# qui l'entourent + 10 ;
# - une case suspect√©e de contenir une mine (avec un drapeau '!') contient sa
# valeur normale √ó(-1) ;
# - une case d√©couverte contient sa valeur normale + 100 (101 = fin du jeu !).
#
# R√©sum√© :
# - de -18 √† -10 : case non min√©e non d√©couverte avec drapeau ;
# - -1 : case min√©e non d√©couverte avec drapeau ;
# - 1 : case min√©e non d√©couverte ;
# - de 10 √† 18 : case non min√©e non d√©couverte ;
# - 101 : case min√©e d√©couverte = perdu !
# - 110 : case non min√©e sans mine autour d√©couverte ;
# - de 111 √† 118 : case non min√©e avec mine autour d√©couverte.
# =============================================================================


from random import randint
import time 

class Demineur:
    print(f"""Lors de l'appel de votre d√©mineur, d√©finissez en parametre une taille, d√©finie de base, un nombre de mine, d√©finie de base, un nombre de coups, d√©fini de base et un nombre, √† 0 de base.\n
          Chaques parametres d√©finis de bases n'a pas essentiellement besoin d'etre d√©fini lors de l\'appel de votre d√©mineur.\n
          Les dif√©rentes tailles de bases sont :\n
                            |   petit : 9x9\n
                            |   normal :16x16\n
                            |   grand : 16x30\n
          Vous pouvez d√©finir une taille sous forme de deux-uplet (a,b) √† la place de d√©fnir une taille pr√©d√©finie.\n
          Pour d√©finir votre d√©mineur, tapez [nom du d√©mineur]=Demineur()\n
          Mettez les parametres cit√©s plus haut dans la paranthese si vous en voulez.""")

    def __init__(self, taille="normal", diff=15, nbr_coup= 100, nbr_vie=0, creative=False): #Possibilt√© de mettre un nombre de coup et de vie, le mode cr√©atif, cach√©, est le mode permettant de finir √† coups sur le jeu.

        DIC_TAILLE = {"petit": (9, 9), "normal": (16, 16), "grand": (16, 30)}

        assert taille in DIC_TAILLE or ((type(taille) == tuple)
                                        and 0 < taille[0] < 27
                                        and 0 < taille[1] < 100)
        assert 10 < diff < 35 and type(diff) == int
        assert type(nbr_coup)==int, "Votre nombre de coup n'est pas valide"
        assert 0<=nbr_coup, "Nombre de coup trop bas, 50 minimum"

        if type(taille) == str:
            self.__LARG = DIC_TAILLE[taille][0]
            self.__HAUT = DIC_TAILLE[taille][1]
        else:
            self.__LARG = taille[0]
            self.__HAUT = taille[1]

        self.__plateau =[[10]*self.__LARG for _ in range(self.__HAUT)]
        self.__NB_MINE = int(self.__LARG*self.__HAUT*diff/100)
        self.__nb_c_dec = 0    # nombre de cases d√©couvertes
        self.__nb_m_dec = 0    # nombre de cases suspect√©es
        self.__fin = False    # fin du jeu
        self.__ALENTOUR = [(1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0),
                           (-1, 1), (0, 1), (1, 1)]
        self.__nbr_coup=nbr_coup #Nombre de coups 
        self.__nbr_vie=nbr_vie #Nombre de vies 
        self.__vie_perdue=0
        self.__minage()
        self.__decompte()
        self.__creative=creative
        print(f"D√©mineur de taille {self.__LARG}x{self.__HAUT} avec {self.__NB_MINE} mines et {self.__nbr_coup} coups possible. Afficher le plateau de jeu ne compte pas comme \n un coup et il n'est pas possible de r√©cuperer des coups. La commande {__name__}.aide() est disponible pour vous fournir les commandes disponibles. Bonne chance !!")
        if self.__creative:
            self.__nbr_vie=self.__NB_MINE+120
            self.__nbr_coup=2147483647 # nombre max cod√© sur 32bits
        self.__start_time = None    ### pour calcul du tps
        self.__score = None         ###.............du score
        self.__win = None

    def __minage(self):
        """Place les mines sur le plateau de jeu."""
        for _ in range(self.__NB_MINE):
            X = randint(0, self.__LARG-1)
            Y = randint(0, self.__HAUT-1)
            self.__plateau[Y][X] = 1

    def __decompte(self):
        """Inscrit le nombre de mines qui entourent chaque case non min√©e."""
        for i in range(self.__HAUT):
            for j in range(self.__LARG):
                if self.__plateau[i][j] != 1:
                    nb_mine = 0
                    for cases in range(8):
                        a, b = self.__ALENTOUR[cases]
                        if 0 <= i + a < self.__HAUT and 0 <= j + b < self.__LARG and self.__plateau[i + a][j + b] == 1 :
                            nb_mine += 1
                            
                    self.__plateau[i][j] = nb_mine + 10

    def __verif_pos(self, pos):
        """Verifie que la chaine correspondant aux coordonn√©es d'une case est
        valide. Renvoie le bool√©en correspondant et sous forme num√©rique
        l'abscisse et l'ordonn√©e de la case (None et None si pos est non
        valide)."""
        rep = False
        x_ind = None
        y_ind = None
        if type(pos) == str and 1 < len(pos) < 4:
            x = pos[0].upper()  # lettre de la colonne
            x_int = ord(x)
            if 64 < x_int < 65 + self.__LARG:
                x_ok = True
                x_ind = x_int - 65
            else:
                x_ok = False
                x_ind = None

            y = pos[1:]  # nombre de la ligne
            try:
                y_int = int(y)
                if 0 < y_int < 1 + self.__HAUT:
                    y_ok = True
                    y_ind = y_int - 1
                else:
                    y_ok = False
                    y_ind = None
            except ValueError:
                y_ok = False
                y_ind = None
            rep = x_ok and y_ok
        return rep, x_ind, y_ind

    def __propage(self, x, y):
        """D√©couvre les cases vides adjacentes √† celle de d√©part, en propageant
        l'op√©ration de proche en proche."""
        for cpl in self.__ALENTOUR:
            x_voisin = x + cpl[0]
            y_voisin = y + cpl[1]
            if -1 < x_voisin < self.__LARG and -1 < y_voisin < self.__HAUT :
                val = self.__plateau[y_voisin][x_voisin]
                if 10 < val < 19:
                    self.__plateau[y_voisin][x_voisin] = val+100
                    self.__nb_c_dec += 1
                elif val == 10:
                    self.__plateau[y_voisin][x_voisin] = 110
                    self.__nb_c_dec += 1
                    self.__propage(x_voisin, y_voisin)

    def clic(self, pos):
        """R√©v√®le une case et affiche le plateau de jeu."""
        if self.__start_time is None:
            self.__start_time = time.time() # chronom√®tre qui d√©marre d√®s que le joueur commence la partie et s'arr√™te lorsque la partie prend fin   
        test, x, y = self.__verif_pos(pos)
        if test and not self.__fin:
            val = self.__plateau[y][x]
            if 0 < val < 19:
                self.__plateau[y][x] = val + 100

            if val == 1:    # perdu si nombre de vie=0!
                self.__nb_m_dec += 1
                if self.__nbr_vie==0:
                    self.__fin = True
                    print("   \nPERDU!   ")
                else:
                    self.__nbr_vie-=1
                    self.__vie_perdue+=1
            elif 10 < val < 19:    # case entour√©e de mines
                self.__nb_c_dec += 1
            elif val == 10:    # cases adjacentes vides
                self.__nb_c_dec += 1
                self.__propage(x, y)

            if self.__nb_c_dec == self.__LARG*self.__HAUT - self.__NB_MINE:
                self.__fin = True
                print("    \nGAGN√â!!!   ")
            self.affiche()
            self.__nbr_coup-=1 #Nombre de coups -1
            if self.__nbr_coup==0:
                self.__fin=True
                print("Perdu, nombre de coup √©gal √† 0")
        else:
            self.__alerte()

    def danger(self, pos):
        """Marque une case du drapeau '!' et affiche le plateau de jeu."""
        Test, x, y = self.__verif_pos(pos)
        if Test and not self.__fin:
            val = self.__plateau[y][x]
            if 0<val<19 :
                self.__plateau[y][x] = -val
                self.__nb_m_dec += 1
            self.affiche()
            self.__nbr_coup-=1 #Nombre de coups -1
            if self.__nbr_coup==0:
                self.__fin=True
                print("Perdu, nombre de coup √©gal √† 0")
        else:
            self.__alerte()

    def annule(self, pos):
        """Supprime le drapeau '!' sans d√©voiler la case et affiche le plateau de jeu."""
        test, x, y = self.__verif_pos(pos)
        if test and not self.__fin:
            val = self.__plateau[y][x]
            if val < 0:
                self.__plateau[y][x] = -val
                self.__nb_m_dec -= 1
            self.affiche()
            self.__nbr_coup-=1 #Nombre de coups -1
            if self.__nbr_coup==0:
                self.__fin=True
                print("Perdu, nombre de coup √©gal √† 0")
        else:
            self.__alerte()

    def affiche(self):
        """Affiche le plateau de jeu."""
        if not self.__creative :
            nbr_vie_rest="‚ù§Ô∏è" #Nombre de vie
            nbr_vie_perdue=""
            for _ in range(self.__nbr_vie):
                nbr_vie_rest+="‚ù§Ô∏è"
            for _ in range(self.__vie_perdue):
                nbr_vie_perdue+="üíî"
        txt = "\nNombre de mines non d√©couvertes :\n "
        txt += str(self.__NB_MINE-self.__nb_m_dec) + "/" + str(self.__NB_MINE)
        txt += "\n"*2

        if self.__fin:
            tps_ecoule = time.time() - self.__start_time
            print(f"Temps √©coul√©: {tps_ecoule:.2f} secondes")
###     pour calculer la dur√©e totale du jeu par soustraction du tps d'arriv√©e par celui de d√©part

            self.__score = self.calcul_score(tps_ecoule)
            print(f"Score: {self.__score} points")
###     pour calculer le score total

        absc = "   "
        for i in range(self.__LARG):
            absc += chr(65+i)
        txt += absc
        txt += "\n"

        for i in range(self.__HAUT):
            if i < 9:
                txt += " " + str(i+1) + "|"
            else:
                txt += str(i+1) + "|"

            for j in range(self.__LARG):
                val = self.__plateau[i][j]
                if val < 0:
                    symb = "!"    # case suspect√©e min√©e
                elif val < 19:    # case non d√©couverte
                    if j % 2 == 1 :
                        symb = "‚ñë"
                    else:
                        symb = "‚ñí"
                elif val == 110:
                    symb = " "    # cases adjacentes vides
                elif val > 110:
                    symb = "‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà"[val-110-1]    # entour√©e de mines
                elif val == 101:
                    symb = "√ó"    # pied sur une mine : Perdu ! ‚ò†
                txt += symb

            txt += "|" + str(i+1) + "\n"
        txt += absc
        print(txt)
        if not self.__creative:
            print(f"{self.__nbr_coup} coups restant")
            print(f"Nombre de vie :\n {nbr_vie_rest}{nbr_vie_perdue}")

    def __alerte(self):
        if self.__fin:
            print("Jeu termin√©...")
        else:
            print("Entrer des coordonn√©es valides !")
    
    def aide(self): #Systeme d'aide, affichant les diferentes methodes dispo
        print(f"{__name__} = Nom de la variable contenant la classe d√©mineur que vous avez d√©finie.\n")
        print(f"{__name__}.affiche() = Affiche le plateau de jeu.")
        print(f"{__name__}.clic('case') = Revele une case")
        print(f"{__name__}.danger('case') = Marque une case comme √©tant min√©e")
        print(f"{__name__}.annule('case') = Retire le marqueur d'une case marqu√©e comme √©tant une mine")

    def calcul_score(self, tps_ecoule):
        if self.__win == True:
            return int(10000 / (1 + 0.1 * tps_ecoule))
            
###    On a ici une fonction qui nous sert √† donner + de pts
###    pour un temps plus court, en cas de partie gagn√©e.

if __name__ == "__main__":
    print(Demineur.__doc__)